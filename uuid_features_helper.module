<?php
/**
 * @file
 */

/**
 * Implements hook_uuid_node_features_export_render_alter().
 */
function uuid_features_helper_uuid_node_features_export_render_alter(&$export, $node, $module) {
  if (isset($export->panelizer['page_manager'])) {
    foreach ($export->panelizer['page_manager']->display->content as $k => &$v) {
      $item = &$export->panelizer['page_manager']->display->content[$k];
      switch ($item->type) {
        case 'node_terms':
          $vocabulary = taxonomy_vocabulary_load($item->configuration['vid']);
          if ($vocabulary) {
            $item->configuration['vocabulary_machine_name'] = $vocabulary->machine_name;
            unset($item->configuration['vid']);
          }
          break;
      }
    }
  }

  if ('webform' == $export->type && isset($node->webform)) {
    $export->webform['node_uuid'] = $node->uuid;
    unset($export->webform['nid']);

    foreach ($export->webform['components'] as $k => &$v) {
      $component = &$export->webform['components'][$k];
      $component['node_uuid'] = $node->uuid;
      unset($component['nid']);
    }
  }
}

/**
 * Implements hook_uuid_node_features_rebuild_alter().
 */
function uuid_features_helper_uuid_node_features_rebuild_alter(&$node, $module) {
  // Panelizer's entity plugin static cache must be reset. This is because
  // the entity plugin handlers is stale during a regular site installation. The
  // plugin handlers know of the entity types but not the concrete bundles and therefore
  // must be reset prior to them being used as the "is panelized" will regularly fail
  // until the static cache is reset.
  drupal_static_reset('panelizer_entity_plugin_get_handler');

  if (isset($node->panelizer['page_manager'])) {
    $node->panelizer['page_manager'] = (object) $node->panelizer['page_manager'];
    foreach ($node->panelizer['page_manager']->display['content'] as $k => &$v) {
      $item = &$node->panelizer['page_manager']->display['content'][$k];
      $item = (object) $item;
      switch ($item->type) {
        case 'node_terms':
          if (isset($item->configuration['vocabulary_machine_name'])) {
            $vocabulary = taxonomy_vocabulary_machine_name_load($item->configuration['vocabulary_machine_name']);
            if ($vocabulary) {
              $item->configuration['vid'] = $vocabulary->vid;
              unset($item->configuration['vocabulary_machine_name']);
            }
          }
          break;
      }
    }
  }
  if ('webform' == $node->type && isset($node->webform)) {
    $node->webform['nid'] = $node->nid;
    unset($node->webform['node_uuid']);
    foreach ($node->webform['components'] as $k => &$v) {
      $component = &$node->webform['components'][$k];
      $component['nid'] = $node->nid;
      unset($component['node_uuid']);
    }
  }
}

/**
 * Implements hook_conditional_fields_features_rebuild_alter().
 */
function uuid_features_helper_conditional_fields_features_rebuild_alter(&$defaults) {
  foreach($defaults as $default_name => $default_info) {
    foreach($default_info['options']['value'] as $condition_name => $condition_info) {
      $terms = entity_uuid_load('taxonomy_term', array($condition_info['uuid']));
      if ($term = array_shift($terms)) {
        $defaults[$default_name]['options']['value'][$condition_name]['tid'] = $term->tid;
        unset($defaults[$default_name]['options']['value'][$condition_name]['uuid']);
      }
    }
  }
}

/**
 * Implements hook_conditional_fields_features_export_render_alter().
 */
function uuid_features_helper_conditional_fields_features_export_render_alter(&$info) {
  foreach($info['dependents'] as $field_name => $field_info) {
    foreach($field_info as $field_reference_id => $field_reference_info) {
      foreach($field_reference_info['options']['value'] as $condition_name => $condition_info) {
        if(isset($condition_info['tid'])) {
          $term = taxonomy_term_load($condition_info['tid']);
          $info['dependents'][$field_name][$field_reference_id]['options']['value'][$condition_name]['uuid'] = $term->uuid;
          unset($info['dependents'][$field_name][$field_reference_id]['options']['value'][$condition_name]['tid']);
        }
      }
    }
  }
}